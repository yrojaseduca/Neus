{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/neus/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { withDirectives as _withDirectives, vShow as _vShow, createVNode as _createVNode } from \"vue\";\n// Components\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\";\nimport { VExpandTransition } from \"../transitions/index.mjs\"; // Composables\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\"; // Utilities\nimport { inject } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.mjs\";\nexport var makeVExpansionPanelTextProps = propsFactory(_objectSpread(_objectSpread({}, makeComponentProps()), makeLazyProps()), 'VExpansionPanelText');\nexport var VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n  props: makeVExpansionPanelTextProps(),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel');\n    var _useLazy = useLazy(props, expansionPanel.isSelected),\n      hasContent = _useLazy.hasContent,\n      onAfterLeave = _useLazy.onAfterLeave;\n    useRender(function () {\n      return _createVNode(VExpandTransition, {\n        \"onAfterLeave\": onAfterLeave\n      }, {\n        \"default\": function _default() {\n          var _slots$default;\n          return [_withDirectives(_createVNode(\"div\", {\n            \"class\": ['v-expansion-panel-text', props[\"class\"]],\n            \"style\": props.style\n          }, [slots[\"default\"] && hasContent.value && _createVNode(\"div\", {\n            \"class\": \"v-expansion-panel-text__wrapper\"\n          }, [(_slots$default = slots[\"default\"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots)])]), [[_vShow, expansionPanel.isSelected.value]])];\n        }\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"names":["VExpansionPanelSymbol","VExpandTransition","makeComponentProps","makeLazyProps","useLazy","inject","genericComponent","propsFactory","useRender","makeVExpansionPanelTextProps","_objectSpread","VExpansionPanelText","name","props","setup","_ref","slots","expansionPanel","Error","_useLazy","isSelected","hasContent","onAfterLeave","_createVNode","_default","_slots$default","_withDirectives","style","value","call","_vShow"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelText.tsx"],"sourcesContent":["// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VExpandTransition } from '@/components/transitions'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelTextProps = propsFactory({\n  ...makeComponentProps(),\n  ...makeLazyProps(),\n}, 'VExpansionPanelText')\n\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n\n  props: makeVExpansionPanelTextProps(),\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class={[\n            'v-expansion-panel-text',\n            props.class,\n          ]}\n          style={ props.style }\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          )}\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n"],"mappings":";;;;AAAA;AAAA,SACSA,qBAAqB;AAAA,SACrBC,iBAAiB,oCAE1B;AAAA,SACSC,kBAAkB;AAAA,SAClBC,aAAa,EAAEC,OAAO,sCAE/B;AACA,SAASC,MAAM,QAAQ,KAAK;AAAA,SACnBC,gBAAgB,EAAEC,YAAY,EAAEC,SAAS;AAElD,OAAO,IAAMC,4BAA4B,GAAGF,YAAY,CAAAG,aAAA,CAAAA,aAAA,KACnDR,kBAAkB,CAAC,CAAC,GACpBC,aAAa,CAAC,IAChB,qBAAqB,CAAC;AAEzB,OAAO,IAAMQ,mBAAmB,GAAGL,gBAAgB,CAAC,CAAC,CAAC;EACpDM,IAAI,EAAE,qBAAqB;EAE3BC,KAAK,EAAEJ,4BAA4B,CAAC,CAAC;EAErCK,KAAK,WAAAA,MAAED,KAAK,EAAAE,IAAA,EAAa;IAAA,IAATC,KAAA,GAAOD,IAAA,CAAPC,KAAA;IACd,IAAMC,cAAc,GAAGZ,MAAM,CAACL,qBAAqB,CAAC;IAEpD,IAAI,CAACiB,cAAc,EAAE,MAAM,IAAIC,KAAK,CAAC,8EAA8E,CAAC;IAEpH,IAAAC,QAAA,GAAqCf,OAAO,CAACS,KAAK,EAAEI,cAAc,CAACG,UAAU,CAAC;MAAtEC,UAAU,GAAAF,QAAA,CAAVE,UAAU;MAAEC,YAAA,GAAAH,QAAA,CAAAG,YAAA;IAEpBd,SAAS,CAAC;MAAA,OAAAe,YAAA,CAAAtB,iBAAA;QAAA,gBAC0BqB;MAAY;QAAA,oBAAAE,SAAA;UAAA,IAAAC,cAAA;UAAA,QAAAC,eAAA,CAAAH,YAAA;YAAA,SAEnC,CACL,wBAAwB,EACxBV,KAAK,SAAM,CACZ;YAAA,SACOA,KAAK,CAACc;UAAK,IAGjBX,KAAK,WAAQ,IAAIK,UAAU,CAACO,KAAK,IAAAL,YAAA;YAAA;UAAA,KAAAE,cAAA,GAE7BT,KAAK,WAAQ,cAAAS,cAAA,uBAAbA,cAAA,CAAAI,IAAA,CAAAb,KAAgB,CAAC,EAEtB,MAAAc,MAAA,EANQb,cAAc,CAACG,UAAU,CAACQ,KAAK;QAAA;MAAA,EAS7C;IAAA,EAAC;IAEF,OAAO,CAAC,CAAC;EACX;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}