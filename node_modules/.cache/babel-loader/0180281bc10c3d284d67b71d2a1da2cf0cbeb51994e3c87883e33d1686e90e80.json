{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/neus/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\n// Styles\nimport \"./VChipGroup.css\";\n\n// Components\nimport { makeVSlideGroupProps, VSlideGroup } from \"../VSlideGroup/VSlideGroup.mjs\"; // Composables\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\";\nimport { makeGroupProps, useGroup } from \"../../composables/group.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeVariantProps } from \"../../composables/variant.mjs\"; // Utilities\nimport { toRef } from 'vue';\nimport { deepEqual, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport var VChipGroupSymbol = Symbol[\"for\"]('vuetify:v-chip-group');\nexport var makeVChipGroupProps = propsFactory(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n  column: Boolean,\n  filter: Boolean,\n  valueComparator: {\n    type: Function,\n    \"default\": deepEqual\n  }\n}, makeVSlideGroupProps()), makeComponentProps()), makeGroupProps({\n  selectedClass: 'v-chip--selected'\n})), makeTagProps()), makeThemeProps()), makeVariantProps({\n  variant: 'tonal'\n})), 'VChipGroup');\nexport var VChipGroup = genericComponent()({\n  name: 'VChipGroup',\n  props: makeVChipGroupProps(),\n  emits: {\n    'update:modelValue': function updateModelValue(value) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var _provideTheme = provideTheme(props),\n      themeClasses = _provideTheme.themeClasses;\n    var _useGroup = useGroup(props, VChipGroupSymbol),\n      isSelected = _useGroup.isSelected,\n      select = _useGroup.select,\n      next = _useGroup.next,\n      prev = _useGroup.prev,\n      selected = _useGroup.selected;\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant')\n      }\n    });\n    useRender(function () {\n      var slideGroupProps = VSlideGroup.filterProps(props);\n      return _createVNode(VSlideGroup, _mergeProps(slideGroupProps, {\n        \"class\": ['v-chip-group', {\n          'v-chip-group--column': props.column\n        }, themeClasses.value, props[\"class\"]],\n        \"style\": props.style\n      }), {\n        \"default\": function _default() {\n          var _slots$default;\n          return [(_slots$default = slots[\"default\"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots, {\n            isSelected: isSelected,\n            select: select,\n            next: next,\n            prev: prev,\n            selected: selected.value\n          })];\n        }\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"names":["makeVSlideGroupProps","VSlideGroup","makeComponentProps","provideDefaults","makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","makeVariantProps","toRef","deepEqual","genericComponent","propsFactory","useRender","VChipGroupSymbol","Symbol","makeVChipGroupProps","_objectSpread","column","Boolean","filter","valueComparator","type","Function","selectedClass","variant","VChipGroup","name","props","emits","updateModelValue","value","setup","_ref","slots","_provideTheme","themeClasses","_useGroup","isSelected","select","next","prev","selected","VChip","color","disabled","slideGroupProps","filterProps","_createVNode","_mergeProps","style","_default","_slots$default","call"],"sources":["../../../src/components/VChipGroup/VChipGroup.tsx"],"sourcesContent":["// Styles\nimport './VChipGroup.sass'\n\n// Components\nimport { makeVSlideGroupProps, VSlideGroup } from '@/components/VSlideGroup/VSlideGroup'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeVariantProps } from '@/composables/variant'\n\n// Utilities\nimport { toRef } from 'vue'\nimport { deepEqual, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group')\n\nexport const makeVChipGroupProps = propsFactory({\n  column: Boolean,\n  filter: Boolean,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeVSlideGroupProps(),\n  ...makeComponentProps(),\n  ...makeGroupProps({ selectedClass: 'v-chip--selected' }),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n  ...makeVariantProps({ variant: 'tonal' } as const),\n}, 'VChipGroup')\n\ntype VChipGroupSlots = {\n  default: {\n    isSelected: (id: number) => boolean\n    select: (id: number, value: boolean) => void\n    next: () => void\n    prev: () => void\n    selected: readonly number[]\n  }\n}\n\nexport const VChipGroup = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: VChipGroupSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VChipGroup',\n\n  props: makeVChipGroupProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VChipGroupSymbol)\n\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => {\n      const slideGroupProps = VSlideGroup.filterProps(props)\n\n      return (\n        <VSlideGroup\n          { ...slideGroupProps }\n          class={[\n            'v-chip-group',\n            {\n              'v-chip-group--column': props.column,\n            },\n            themeClasses.value,\n            props.class,\n          ]}\n          style={ props.style }\n        >\n          { slots.default?.({\n            isSelected,\n            select,\n            next,\n            prev,\n            selected: selected.value,\n          })}\n        </VSlideGroup>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VChipGroup = InstanceType<typeof VChipGroup>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}