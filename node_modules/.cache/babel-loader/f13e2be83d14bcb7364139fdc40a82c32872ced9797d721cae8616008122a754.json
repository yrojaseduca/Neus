{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.math.sign.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\n// Composables\nimport { useDisplay } from \"./display.mjs\";\nimport { useResizeObserver } from \"./resizeObserver.mjs\"; // Utilities\nimport { computed, nextTick, onScopeDispose, ref, shallowRef, watch, watchEffect } from 'vue';\nimport { clamp, debounce, IN_BROWSER, propsFactory } from \"../util/index.mjs\"; // Types\nvar UP = -1;\nvar DOWN = 1;\n\n/** Determines how large each batch of items should be */\nvar BUFFER_PX = 100;\nexport var makeVirtualProps = propsFactory({\n  itemHeight: {\n    type: [Number, String],\n    \"default\": null\n  },\n  height: [Number, String]\n}, 'virtual');\nexport function useVirtual(props, items) {\n  var display = useDisplay();\n  var itemHeight = shallowRef(0);\n  watchEffect(function () {\n    itemHeight.value = parseFloat(props.itemHeight || 0);\n  });\n  var first = shallowRef(0);\n  var last = shallowRef(Math.ceil(\n  // Assume 16px items filling the entire screen height if\n  // not provided. This is probably incorrect but it minimises\n  // the chance of ending up with empty space at the bottom.\n  // The default value is set here to avoid poisoning getSize()\n  (parseInt(props.height) || display.height.value) / (itemHeight.value || 16)) || 1);\n  var paddingTop = shallowRef(0);\n  var paddingBottom = shallowRef(0);\n\n  /** The scrollable element */\n  var containerRef = ref();\n  /** An element marking the top of the scrollable area,\n   * used to add an offset if there's padding or other elements above the virtual list */\n  var markerRef = ref();\n  /** markerRef's offsetTop, lazily evaluated */\n  var markerOffset = 0;\n  var _useResizeObserver = useResizeObserver(),\n    resizeRef = _useResizeObserver.resizeRef,\n    contentRect = _useResizeObserver.contentRect;\n  watchEffect(function () {\n    resizeRef.value = containerRef.value;\n  });\n  var viewportHeight = computed(function () {\n    var _contentRect$value;\n    return containerRef.value === document.documentElement ? display.height.value : ((_contentRect$value = contentRect.value) === null || _contentRect$value === void 0 ? void 0 : _contentRect$value.height) || parseInt(props.height) || 0;\n  });\n  /** All static elements have been rendered and we have an assumed item height */\n  var hasInitialRender = computed(function () {\n    return !!(containerRef.value && markerRef.value && viewportHeight.value && itemHeight.value);\n  });\n  var sizes = Array.from({\n    length: items.value.length\n  });\n  var offsets = Array.from({\n    length: items.value.length\n  });\n  var updateTime = shallowRef(0);\n  var targetScrollIndex = -1;\n  function getSize(index) {\n    return sizes[index] || itemHeight.value;\n  }\n  var updateOffsets = debounce(function () {\n    var start = performance.now();\n    offsets[0] = 0;\n    var length = items.value.length;\n    for (var i = 1; i <= length - 1; i++) {\n      offsets[i] = (offsets[i - 1] || 0) + getSize(i - 1);\n    }\n    updateTime.value = Math.max(updateTime.value, performance.now() - start);\n  }, updateTime);\n  var unwatch = watch(hasInitialRender, function (v) {\n    if (!v) return;\n    // First render is complete, update offsets and visible\n    // items in case our assumed item height was incorrect\n\n    unwatch();\n    markerOffset = markerRef.value.offsetTop;\n    updateOffsets.immediate();\n    calculateVisibleItems();\n    if (!~targetScrollIndex) return;\n    nextTick(function () {\n      IN_BROWSER && window.requestAnimationFrame(function () {\n        scrollToIndex(targetScrollIndex);\n        targetScrollIndex = -1;\n      });\n    });\n  });\n  watch(viewportHeight, function (val, oldVal) {\n    oldVal && calculateVisibleItems();\n  });\n  onScopeDispose(function () {\n    updateOffsets.clear();\n  });\n  function handleItemResize(index, height) {\n    var prevHeight = sizes[index];\n    var prevMinHeight = itemHeight.value;\n    itemHeight.value = prevMinHeight ? Math.min(itemHeight.value, height) : height;\n    if (prevHeight !== height || prevMinHeight !== itemHeight.value) {\n      sizes[index] = height;\n      updateOffsets();\n    }\n  }\n  function calculateOffset(index) {\n    index = clamp(index, 0, items.value.length - 1);\n    return offsets[index] || 0;\n  }\n  function calculateIndex(scrollTop) {\n    return binaryClosest(offsets, scrollTop);\n  }\n  var lastScrollTop = 0;\n  var scrollVelocity = 0;\n  var lastScrollTime = 0;\n  function handleScroll() {\n    if (!containerRef.value || !markerRef.value) return;\n    var scrollTop = containerRef.value.scrollTop;\n    var scrollTime = performance.now();\n    var scrollDeltaT = scrollTime - lastScrollTime;\n    if (scrollDeltaT > 500) {\n      scrollVelocity = Math.sign(scrollTop - lastScrollTop);\n\n      // Not super important, only update at the\n      // start of a scroll sequence to avoid reflows\n      markerOffset = markerRef.value.offsetTop;\n    } else {\n      scrollVelocity = scrollTop - lastScrollTop;\n    }\n    lastScrollTop = scrollTop;\n    lastScrollTime = scrollTime;\n    calculateVisibleItems();\n  }\n  function handleScrollend() {\n    if (!containerRef.value || !markerRef.value) return;\n    scrollVelocity = 0;\n    lastScrollTime = 0;\n    calculateVisibleItems();\n  }\n  var raf = -1;\n  function calculateVisibleItems() {\n    cancelAnimationFrame(raf);\n    raf = requestAnimationFrame(_calculateVisibleItems);\n  }\n  function _calculateVisibleItems() {\n    if (!containerRef.value || !viewportHeight.value) return;\n    var scrollTop = lastScrollTop - markerOffset;\n    var direction = Math.sign(scrollVelocity);\n    var startPx = Math.max(0, scrollTop - BUFFER_PX);\n    var start = clamp(calculateIndex(startPx), 0, items.value.length);\n    var endPx = scrollTop + viewportHeight.value + BUFFER_PX;\n    var end = clamp(calculateIndex(endPx) + 1, start + 1, items.value.length);\n    if (\n    // Only update the side we're scrolling towards,\n    // the other side will be updated incidentally\n    (direction !== UP || start < first.value) && (direction !== DOWN || end > last.value)) {\n      var topOverflow = calculateOffset(first.value) - calculateOffset(start);\n      var bottomOverflow = calculateOffset(end) - calculateOffset(last.value);\n      var bufferOverflow = Math.max(topOverflow, bottomOverflow);\n      if (bufferOverflow > BUFFER_PX) {\n        first.value = start;\n        last.value = end;\n      } else {\n        // Only update the side that's reached its limit if there's still buffer left\n        if (start <= 0) first.value = start;\n        if (end >= items.value.length) last.value = end;\n      }\n    }\n    paddingTop.value = calculateOffset(first.value);\n    paddingBottom.value = calculateOffset(items.value.length) - calculateOffset(last.value);\n  }\n  function scrollToIndex(index) {\n    var offset = calculateOffset(index);\n    if (!containerRef.value || index && !offset) {\n      targetScrollIndex = index;\n    } else {\n      containerRef.value.scrollTop = offset;\n    }\n  }\n  var computedItems = computed(function () {\n    return items.value.slice(first.value, last.value).map(function (item, index) {\n      return {\n        raw: item,\n        index: index + first.value\n      };\n    });\n  });\n  watch(items, function () {\n    sizes = Array.from({\n      length: items.value.length\n    });\n    offsets = Array.from({\n      length: items.value.length\n    });\n    updateOffsets.immediate();\n    calculateVisibleItems();\n  }, {\n    deep: true\n  });\n  return {\n    containerRef: containerRef,\n    markerRef: markerRef,\n    computedItems: computedItems,\n    paddingTop: paddingTop,\n    paddingBottom: paddingBottom,\n    scrollToIndex: scrollToIndex,\n    handleScroll: handleScroll,\n    handleScrollend: handleScrollend,\n    handleItemResize: handleItemResize\n  };\n}\n\n// https://gist.github.com/robertleeplummerjr/1cc657191d34ecd0a324\nfunction binaryClosest(arr, val) {\n  var high = arr.length - 1;\n  var low = 0;\n  var mid = 0;\n  var item = null;\n  var target = -1;\n  if (arr[high] < val) {\n    return high;\n  }\n  while (low <= high) {\n    mid = low + high >> 1;\n    item = arr[mid];\n    if (item > val) {\n      high = mid - 1;\n    } else if (item < val) {\n      target = mid;\n      low = mid + 1;\n    } else if (item === val) {\n      return mid;\n    } else {\n      return low;\n    }\n  }\n  return target;\n}","map":{"version":3,"names":["useDisplay","useResizeObserver","computed","nextTick","onScopeDispose","ref","shallowRef","watch","watchEffect","clamp","debounce","IN_BROWSER","propsFactory","UP","DOWN","BUFFER_PX","makeVirtualProps","itemHeight","type","Number","String","height","useVirtual","props","items","display","value","parseFloat","first","last","Math","ceil","parseInt","paddingTop","paddingBottom","containerRef","markerRef","markerOffset","_useResizeObserver","resizeRef","contentRect","viewportHeight","_contentRect$value","document","documentElement","hasInitialRender","sizes","Array","from","length","offsets","updateTime","targetScrollIndex","getSize","index","updateOffsets","start","performance","now","i","max","unwatch","v","offsetTop","immediate","calculateVisibleItems","window","requestAnimationFrame","scrollToIndex","val","oldVal","clear","handleItemResize","prevHeight","prevMinHeight","min","calculateOffset","calculateIndex","scrollTop","binaryClosest","lastScrollTop","scrollVelocity","lastScrollTime","handleScroll","scrollTime","scrollDeltaT","sign","handleScrollend","raf","cancelAnimationFrame","_calculateVisibleItems","direction","startPx","endPx","end","topOverflow","bottomOverflow","bufferOverflow","offset","computedItems","slice","map","item","raw","deep","arr","high","low","mid","target"],"sources":["../../src/composables/virtual.ts"],"sourcesContent":["// Composables\nimport { useDisplay } from '@/composables/display'\nimport { useResizeObserver } from '@/composables/resizeObserver'\n\n// Utilities\nimport { computed, nextTick, onScopeDispose, ref, shallowRef, watch, watchEffect } from 'vue'\nimport { clamp, debounce, IN_BROWSER, propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\nconst UP = -1\nconst DOWN = 1\n\n/** Determines how large each batch of items should be */\nconst BUFFER_PX = 100\n\ntype VirtualProps = {\n  itemHeight?: number | string\n  height?: number | string\n}\n\nexport const makeVirtualProps = propsFactory({\n  itemHeight: {\n    type: [Number, String],\n    default: null,\n  },\n  height: [Number, String],\n}, 'virtual')\n\nexport function useVirtual <T> (props: VirtualProps, items: Ref<readonly T[]>) {\n  const display = useDisplay()\n\n  const itemHeight = shallowRef(0)\n  watchEffect(() => {\n    itemHeight.value = parseFloat(props.itemHeight || 0)\n  })\n\n  const first = shallowRef(0)\n  const last = shallowRef(Math.ceil(\n    // Assume 16px items filling the entire screen height if\n    // not provided. This is probably incorrect but it minimises\n    // the chance of ending up with empty space at the bottom.\n    // The default value is set here to avoid poisoning getSize()\n    (parseInt(props.height!) || display.height.value) / (itemHeight.value || 16)\n  ) || 1)\n  const paddingTop = shallowRef(0)\n  const paddingBottom = shallowRef(0)\n\n  /** The scrollable element */\n  const containerRef = ref<HTMLElement>()\n  /** An element marking the top of the scrollable area,\n   * used to add an offset if there's padding or other elements above the virtual list */\n  const markerRef = ref<HTMLElement>()\n  /** markerRef's offsetTop, lazily evaluated */\n  let markerOffset = 0\n\n  const { resizeRef, contentRect } = useResizeObserver()\n  watchEffect(() => {\n    resizeRef.value = containerRef.value\n  })\n  const viewportHeight = computed(() => {\n    return containerRef.value === document.documentElement\n      ? display.height.value\n      : contentRect.value?.height || parseInt(props.height!) || 0\n  })\n  /** All static elements have been rendered and we have an assumed item height */\n  const hasInitialRender = computed(() => {\n    return !!(containerRef.value && markerRef.value && viewportHeight.value && itemHeight.value)\n  })\n\n  let sizes = Array.from<number | null>({ length: items.value.length })\n  let offsets = Array.from<number>({ length: items.value.length })\n  const updateTime = shallowRef(0)\n  let targetScrollIndex = -1\n\n  function getSize (index: number) {\n    return sizes[index] || itemHeight.value\n  }\n\n  const updateOffsets = debounce(() => {\n    const start = performance.now()\n    offsets[0] = 0\n    const length = items.value.length\n    for (let i = 1; i <= length - 1; i++) {\n      offsets[i] = (offsets[i - 1] || 0) + getSize(i - 1)\n    }\n    updateTime.value = Math.max(updateTime.value, performance.now() - start)\n  }, updateTime)\n\n  const unwatch = watch(hasInitialRender, v => {\n    if (!v) return\n    // First render is complete, update offsets and visible\n    // items in case our assumed item height was incorrect\n\n    unwatch()\n    markerOffset = markerRef.value!.offsetTop\n    updateOffsets.immediate()\n    calculateVisibleItems()\n\n    if (!~targetScrollIndex) return\n\n    nextTick(() => {\n      IN_BROWSER && window.requestAnimationFrame(() => {\n        scrollToIndex(targetScrollIndex)\n        targetScrollIndex = -1\n      })\n    })\n  })\n  watch(viewportHeight, (val, oldVal) => {\n    oldVal && calculateVisibleItems()\n  })\n\n  onScopeDispose(() => {\n    updateOffsets.clear()\n  })\n\n  function handleItemResize (index: number, height: number) {\n    const prevHeight = sizes[index]\n    const prevMinHeight = itemHeight.value\n\n    itemHeight.value = prevMinHeight ? Math.min(itemHeight.value, height) : height\n\n    if (prevHeight !== height || prevMinHeight !== itemHeight.value) {\n      sizes[index] = height\n      updateOffsets()\n    }\n  }\n\n  function calculateOffset (index: number) {\n    index = clamp(index, 0, items.value.length - 1)\n    return offsets[index] || 0\n  }\n\n  function calculateIndex (scrollTop: number) {\n    return binaryClosest(offsets, scrollTop)\n  }\n\n  let lastScrollTop = 0\n  let scrollVelocity = 0\n  let lastScrollTime = 0\n  function handleScroll () {\n    if (!containerRef.value || !markerRef.value) return\n\n    const scrollTop = containerRef.value.scrollTop\n    const scrollTime = performance.now()\n    const scrollDeltaT = scrollTime - lastScrollTime\n\n    if (scrollDeltaT > 500) {\n      scrollVelocity = Math.sign(scrollTop - lastScrollTop)\n\n      // Not super important, only update at the\n      // start of a scroll sequence to avoid reflows\n      markerOffset = markerRef.value.offsetTop\n    } else {\n      scrollVelocity = scrollTop - lastScrollTop\n    }\n\n    lastScrollTop = scrollTop\n    lastScrollTime = scrollTime\n\n    calculateVisibleItems()\n  }\n  function handleScrollend () {\n    if (!containerRef.value || !markerRef.value) return\n\n    scrollVelocity = 0\n    lastScrollTime = 0\n\n    calculateVisibleItems()\n  }\n\n  let raf = -1\n  function calculateVisibleItems () {\n    cancelAnimationFrame(raf)\n    raf = requestAnimationFrame(_calculateVisibleItems)\n  }\n  function _calculateVisibleItems () {\n    if (!containerRef.value || !viewportHeight.value) return\n    const scrollTop = lastScrollTop - markerOffset\n    const direction = Math.sign(scrollVelocity)\n\n    const startPx = Math.max(0, scrollTop - BUFFER_PX)\n    const start = clamp(calculateIndex(startPx), 0, items.value.length)\n\n    const endPx = scrollTop + viewportHeight.value + BUFFER_PX\n    const end = clamp(calculateIndex(endPx) + 1, start + 1, items.value.length)\n\n    if (\n      // Only update the side we're scrolling towards,\n      // the other side will be updated incidentally\n      (direction !== UP || start < first.value) &&\n      (direction !== DOWN || end > last.value)\n    ) {\n      const topOverflow = calculateOffset(first.value) - calculateOffset(start)\n      const bottomOverflow = calculateOffset(end) - calculateOffset(last.value)\n      const bufferOverflow = Math.max(topOverflow, bottomOverflow)\n\n      if (bufferOverflow > BUFFER_PX) {\n        first.value = start\n        last.value = end\n      } else {\n        // Only update the side that's reached its limit if there's still buffer left\n        if (start <= 0) first.value = start\n        if (end >= items.value.length) last.value = end\n      }\n    }\n\n    paddingTop.value = calculateOffset(first.value)\n    paddingBottom.value = calculateOffset(items.value.length) - calculateOffset(last.value)\n  }\n\n  function scrollToIndex (index: number) {\n    const offset = calculateOffset(index)\n    if (!containerRef.value || (index && !offset)) {\n      targetScrollIndex = index\n    } else {\n      containerRef.value.scrollTop = offset\n    }\n  }\n\n  const computedItems = computed(() => {\n    return items.value.slice(first.value, last.value).map((item, index) => ({\n      raw: item,\n      index: index + first.value,\n    }))\n  })\n\n  watch(items, () => {\n    sizes = Array.from({ length: items.value.length })\n    offsets = Array.from({ length: items.value.length })\n    updateOffsets.immediate()\n    calculateVisibleItems()\n  }, { deep: true })\n\n  return {\n    containerRef,\n    markerRef,\n    computedItems,\n    paddingTop,\n    paddingBottom,\n    scrollToIndex,\n    handleScroll,\n    handleScrollend,\n    handleItemResize,\n  }\n}\n\n// https://gist.github.com/robertleeplummerjr/1cc657191d34ecd0a324\nfunction binaryClosest (arr: ArrayLike<number>, val: number) {\n  let high = arr.length - 1\n  let low = 0\n  let mid = 0\n  let item = null\n  let target = -1\n\n  if (arr[high]! < val) {\n    return high\n  }\n\n  while (low <= high) {\n    mid = (low + high) >> 1\n    item = arr[mid]!\n\n    if (item > val) {\n      high = mid - 1\n    } else if (item < val) {\n      target = mid\n      low = mid + 1\n    } else if (item === val) {\n      return mid\n    } else {\n      return low\n    }\n  }\n\n  return target\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}